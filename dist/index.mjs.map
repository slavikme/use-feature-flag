{"version":3,"file":"index.mjs","sources":["../src/useFeatureFlag.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useLocalStorage } from \"usehooks-ts\";\n\nexport type FeatureFlagOptions = {\n  /** Prefix for the localStorage key. Defaults to \"FF_\" */\n  prefix?: string;\n  /** Whether to store the initial value in localStorage on first mount. Defaults to true */\n  storeOnInit?: boolean;\n};\n\n/**\n * Custom hook to manage feature flags in the application.\n *\n * @example\n * ```tsx\n * // Basic usage with options\n * const [isEnabled, setEnabled] = useFeatureFlag('new-feature', {\n *   prefix: 'FEATURE_',\n *   storeOnInit: true\n * });\n *\n * // With initial value and options\n * const [isEnabled, setEnabled] = useFeatureFlag('new-feature', true, {\n *   prefix: 'FEATURE_',\n *   storeOnInit: true\n * });\n *\n * // With just initial value\n * const [isEnabled, setEnabled] = useFeatureFlag('new-feature', true);\n * ```\n *\n * @param {string} flagName - The name of the feature flag.\n * @param {boolean | FeatureFlagOptions} initValueOrOptions - Initial value or configuration options.\n * @param {FeatureFlagOptions} [options] - Configuration options for the feature flag.\n * @returns {[boolean, (value: boolean) => void]} A tuple containing the flag value and a setter function.\n */\nfunction useFeatureFlag(\n  flagName: string,\n  initValue?: boolean,\n  options?: FeatureFlagOptions\n): [boolean, (value: boolean) => void];\n\nfunction useFeatureFlag(\n  flagName: string,\n  options?: FeatureFlagOptions\n): [boolean, (value: boolean) => void];\n\nfunction useFeatureFlag(\n  flagName: string,\n  initValueOrOptions: boolean | FeatureFlagOptions = false,\n  options: FeatureFlagOptions = {}\n): [boolean, (value: boolean) => void] {\n  const isOptions = typeof initValueOrOptions === \"object\";\n  const initValue = isOptions ? false : initValueOrOptions;\n  const finalOptions = isOptions ? initValueOrOptions : options;\n\n  const { prefix = \"FF_\", storeOnInit = true } = finalOptions;\n\n  const prefixedFlagName = `${prefix}${flagName}`;\n  const [flagValue, setFlagValue] = useLocalStorage<boolean | null>(\n    prefixedFlagName,\n    null\n  );\n\n  useEffect(() => {\n    if (storeOnInit && flagValue === null) {\n      setFlagValue(initValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- we want to run this effect only once and only when the component is mounted\n  }, []);\n\n  return [flagValue ?? initValue, setFlagValue];\n}\n\nexport default useFeatureFlag;\n"],"names":["useFeatureFlag","flagName","initValueOrOptions","options","isOptions","initValue","finalOptions","prefix","storeOnInit","prefixedFlagName","flagValue","setFlagValue","useLocalStorage","useEffect"],"mappings":";;AA+CA,SAASA,EACPC,GACAC,IAAmD,IACnDC,IAA8B,CAAA,GACO;AAC/B,QAAAC,IAAY,OAAOF,KAAuB,UAC1CG,IAAYD,IAAY,KAAQF,GAChCI,IAAeF,IAAYF,IAAqBC,GAEhD,EAAE,QAAAI,IAAS,OAAO,aAAAC,IAAc,GAAS,IAAAF,GAEzCG,IAAmB,GAAGF,CAAM,GAAGN,CAAQ,IACvC,CAACS,GAAWC,CAAY,IAAIC;AAAA,IAChCH;AAAA,IACA;AAAA,EACF;AAEA,SAAAI,EAAU,MAAM;AACV,IAAAL,KAAeE,MAAc,QAC/BC,EAAaN,CAAS;AAAA,EAG1B,GAAG,EAAE,GAEE,CAACK,KAAaL,GAAWM,CAAY;AAC9C;"}